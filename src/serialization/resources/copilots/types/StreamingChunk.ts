/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Credal from "../../../../api/index";
import * as core from "../../../../core";
import { InitialChunk } from "./InitialChunk";
import { DataChunk } from "./DataChunk";
import { EndOfMessageChunk } from "./EndOfMessageChunk";
import { FinalChunk } from "./FinalChunk";
import { BlockedChunk } from "./BlockedChunk";
import { ErrorChunk } from "./ErrorChunk";

export const StreamingChunk: core.serialization.Schema<serializers.StreamingChunk.Raw, Credal.StreamingChunk> =
    core.serialization
        .union("event", {
            initial: InitialChunk,
            data_chunk: DataChunk,
            end_of_message: EndOfMessageChunk,
            final_chunk: FinalChunk,
            blocked: BlockedChunk,
            error_chunk: ErrorChunk,
        })
        .transform<Credal.StreamingChunk>({
            transform: (value) => value,
            untransform: (value) => value,
        });

export declare namespace StreamingChunk {
    export type Raw =
        | StreamingChunk.Initial
        | StreamingChunk.DataChunk
        | StreamingChunk.EndOfMessage
        | StreamingChunk.FinalChunk
        | StreamingChunk.Blocked
        | StreamingChunk.ErrorChunk;

    export interface Initial extends InitialChunk.Raw {
        event: "initial";
    }

    export interface DataChunk extends DataChunk.Raw {
        event: "data_chunk";
    }

    export interface EndOfMessage extends EndOfMessageChunk.Raw {
        event: "end_of_message";
    }

    export interface FinalChunk extends FinalChunk.Raw {
        event: "final_chunk";
    }

    export interface Blocked extends BlockedChunk.Raw {
        event: "blocked";
    }

    export interface ErrorChunk extends ErrorChunk.Raw {
        event: "error_chunk";
    }
}
