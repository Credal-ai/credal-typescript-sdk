/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Credal from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Users {
    export interface Options {
        environment?: core.Supplier<environments.CredalEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Users {
    constructor(protected readonly _options: Users.Options = {}) {}

    /**
     * Bulk patch metadata for users
     *
     * @param {Credal.UserMetadataPatch[]} request
     * @param {Users.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.users.metadata([{
     *             metadata: {
     *                 "State": "NY",
     *                 "Job Role": "CEO"
     *             },
     *             userEmail: "ravin@credal.ai"
     *         }, {
     *             metadata: {
     *                 "State": "NY",
     *                 "Department": "Engineering"
     *             },
     *             userEmail: "jack@credal.ai"
     *         }])
     */
    public metadata(
        request: Credal.UserMetadataPatch[],
        requestOptions?: Users.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__metadata(request, requestOptions));
    }

    private async __metadata(
        request: Credal.UserMetadataPatch[],
        requestOptions?: Users.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CredalEnvironment.Production,
                "/v0/users/metadata",
            ),
            method: "PATCH",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@credal/sdk",
                "X-Fern-SDK-Version": "0.0.30",
                "User-Agent": "@credal/sdk/0.0.30",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.users.metadata.Request.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CredalError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CredalError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CredalTimeoutError("Timeout exceeded when calling PATCH /v0/users/metadata.");
            case "unknown":
                throw new errors.CredalError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["CREDAL_API_KEY"];
        if (bearer == null) {
            throw new errors.CredalError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a CREDAL_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
