// This file was auto-generated by Fern from our API Definition.

import type * as Credal from "../../../../index.js";

/**
 * @example
 *     {
 *         documentName: "My Document",
 *         documentContents: "Lorem ipsum...",
 *         documentExternalId: "73eead26-d124-4940-b329-5f068a0a8db9",
 *         allowedUsersEmailAddresses: ["jack@credal.ai", "ravin@credal.ai"],
 *         uploadAsUserEmail: "jack@credal.ai"
 *     }
 */
export interface UploadDocumentContentsRequest {
    /** The name of the document you want to upload. */
    documentName: string;
    /** The full LLM-formatted text contents of the document you want to upload. */
    documentContents: string;
    /** Users allowed to access the document. Unlike Credal's out of the box connectors which reconcile various permissions models from 3rd party software, for custom uploads the caller is responsible for specifying who can access the document and currently flattening groups if applicable. Documents can also be marked as internal public. */
    allowedUsersEmailAddresses: string[];
    /** [Legacy] The user on behalf of whom the document should be uploaded. In most cases, this can simply be the email of the developer making the API call. This field will be removed in the future in favor of purely specifying permissions via allowedUsersEmailAddresses. */
    uploadAsUserEmail: string;
    /** The external ID of the document. This is typically the ID as it exists in its original external system. Uploads to the same external ID will update the document in Credal. */
    documentExternalId: string;
    /** The external URL of the document you want to upload. If provided Credal will link to this URL. */
    documentExternalUrl?: string;
    /** Optional JSON representing any custom metadata for this document */
    customMetadata?: Record<string, Credal.CustomMetadataValue>;
    /** If specified, the document will also be added to the provided document collection. This operation is eventually consistent, meaning the document does not immediately start appearing in searches of that collection due to an asynchronous embedding process. To achieve strong consistency use the `awaitVectorStoreSync` parameter. */
    collectionId?: string;
    /** If specified, document contents will be re-uploaded and re-embedded even if the document already exists in Credal */
    forceUpdate?: boolean;
    /** If specified, document will be accessible to everyone within the organization of the uploader */
    internalPublic?: boolean;
    /** Document uploads are eventually consistent by default. If specified `true` the API will wait for the vector store to be updated before returning. This is useful if you want to ensure that the document is immediately searchable after this call returns. */
    awaitVectorStoreSync?: boolean;
}
