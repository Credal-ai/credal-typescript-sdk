/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Credal from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace DocumentCollections {
    interface Options {
        environment?: core.Supplier<environments.CredalEnvironment | string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}

export class DocumentCollections {
    constructor(protected readonly _options: DocumentCollections.Options = {}) {}

    /**
     * Add documents to a document collection. Note that the documents must already exist in the document catalog to use this endpoint. If you want to upload a new document to a collection, use the `uploadDocumentContents` endpoint.
     *
     * @param {Credal.AddDocumentsToCollectionRequest} request
     * @param {DocumentCollections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.documentCollections.addDocumentsToCollection({
     *         collectionId: "82e4b12a-6990-45d4-8ebd-85c00e030c24",
     *         resourceIdentifiers: [{
     *                 type: "external-resource-id",
     *                 externalResourceId: "170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr",
     *                 resourceType: "GOOGLE_DRIVE_ITEM"
     *             }, {
     *                 type: "external-resource-id",
     *                 externalResourceId: "398KAHdfkjsdf09r54UvyslPVWkQFOA0lOiu34in923",
     *                 resourceType: "GOOGLE_DRIVE_ITEM"
     *             }]
     *     })
     */
    public async addDocumentsToCollection(
        request: Credal.AddDocumentsToCollectionRequest,
        requestOptions?: DocumentCollections.RequestOptions
    ): Promise<void> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.CredalEnvironment.Production,
                "/v0/documentCollections/addDocumentsToCollection"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@credal/sdk",
                "X-Fern-SDK-Version": "0.0.20",
                "User-Agent": "@credal/sdk/0.0.20",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.AddDocumentsToCollectionRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CredalError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CredalError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CredalTimeoutError();
            case "unknown":
                throw new errors.CredalError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Remove documents from a collection
     *
     * @param {Credal.RemoveDocumentsFromCollectionRequest} request
     * @param {DocumentCollections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.documentCollections.removeDocumentsFromCollection({
     *         collectionId: "82e4b12a-6990-45d4-8ebd-85c00e030c24",
     *         resourceIdentifiers: [{
     *                 type: "external-resource-id",
     *                 externalResourceId: "170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr",
     *                 resourceType: "GOOGLE_DRIVE_ITEM"
     *             }, {
     *                 type: "external-resource-id",
     *                 externalResourceId: "398KAHdfkjsdf09r54UvyslPVWkQFOA0lOiu34in923",
     *                 resourceType: "GOOGLE_DRIVE_ITEM"
     *             }]
     *     })
     */
    public async removeDocumentsFromCollection(
        request: Credal.RemoveDocumentsFromCollectionRequest,
        requestOptions?: DocumentCollections.RequestOptions
    ): Promise<void> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.CredalEnvironment.Production,
                "/v0/documentCollections/removeDocumentsFromCollection"
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@credal/sdk",
                "X-Fern-SDK-Version": "0.0.20",
                "User-Agent": "@credal/sdk/0.0.20",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.RemoveDocumentsFromCollectionRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CredalError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CredalError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CredalTimeoutError();
            case "unknown":
                throw new errors.CredalError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Create a new copilot. The API key used will be added to the copilot for future Requests
     *
     * @param {Credal.CreateCollectionRequest} request
     * @param {DocumentCollections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.documentCollections.createCollection({
     *         name: "Customer Collection",
     *         description: "This collection is used to answer customer requests based on internal documentation.",
     *         collaborators: [{
     *                 email: "test@gmail.com",
     *                 role: "editor"
     *             }]
     *     })
     */
    public async createCollection(
        request: Credal.CreateCollectionRequest,
        requestOptions?: DocumentCollections.RequestOptions
    ): Promise<Credal.CreateCollectionResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.CredalEnvironment.Production,
                "/v0/documentCollections/createCollection"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@credal/sdk",
                "X-Fern-SDK-Version": "0.0.20",
                "User-Agent": "@credal/sdk/0.0.20",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.CreateCollectionRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.CreateCollectionResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CredalError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CredalError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CredalTimeoutError();
            case "unknown":
                throw new errors.CredalError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Delete the collection.
     *
     * @param {Credal.DeleteCollectionRequest} request
     * @param {DocumentCollections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.documentCollections.deleteCollection({
     *         collectionId: "ac20e6ba-0bae-11ef-b25a-efca73df4c3a"
     *     })
     */
    public async deleteCollection(
        request: Credal.DeleteCollectionRequest,
        requestOptions?: DocumentCollections.RequestOptions
    ): Promise<Credal.DeleteCollectionResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.CredalEnvironment.Production,
                "/v0/documentCollections/deleteCollection"
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@credal/sdk",
                "X-Fern-SDK-Version": "0.0.20",
                "User-Agent": "@credal/sdk/0.0.20",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.DeleteCollectionRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.DeleteCollectionResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CredalError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CredalError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CredalTimeoutError();
            case "unknown":
                throw new errors.CredalError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Credal lets you easily sync your MongoDB data for use in Collections and Copilots. Create a new sync from a MongoDB collection to a Credal collection.
     *
     * @param {Credal.CreateMongoCollectionSyncRequest} request
     * @param {DocumentCollections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.documentCollections.createMongoCollectionSync({
     *         mongoUri: "mongodb+srv://cluster0.hzwklqn.mongodb.net/Cluster0?retryWrites=true&w=majority",
     *         collectionId: "ac20e6ba-0bae-11ef-b25a-efca73df4c3a",
     *         config: {
     *             syncName: "My sales transcripts",
     *             collectionName: "myCollection",
     *             filterExpression: {
     *                 "status": {
     *                     "$ne": "disabled"
     *                 }
     *             },
     *             sourceFields: {
     *                 body: "body",
     *                 sourceName: "meetingName",
     *                 sourceSystemUpdated: "transcriptDatetime",
     *                 sourceUrl: "link"
     *             }
     *         }
     *     })
     */
    public async createMongoCollectionSync(
        request: Credal.CreateMongoCollectionSyncRequest,
        requestOptions?: DocumentCollections.RequestOptions
    ): Promise<Credal.MongoCollectionSyncResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.CredalEnvironment.Production,
                "/v0/documentCollections/mongodb/createMongoSync"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@credal/sdk",
                "X-Fern-SDK-Version": "0.0.20",
                "User-Agent": "@credal/sdk/0.0.20",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.CreateMongoCollectionSyncRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.MongoCollectionSyncResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CredalError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CredalError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CredalTimeoutError();
            case "unknown":
                throw new errors.CredalError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Credal lets you easily sync your MongoDB data for use in Collections and Copilots. Update an existing sync from a MongoDB collection to a Credal collection via the `mongoCredentialId`, to disambiguate between multiple potential syncs to a given collection.
     *
     * @param {Credal.UpdateMongoCollectionSyncRequest} request
     * @param {DocumentCollections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.documentCollections.updateMongoCollectionSync({
     *         mongoUri: "mongodb+srv://cluster0.hzwklqn.mongodb.net/Cluster0?retryWrites=true&w=majority",
     *         mongoCredentialId: "5988ed76-6ee1-11ef-97dd-1fca54b7c4bc",
     *         config: {
     *             syncName: "My recent summarized sales transcripts",
     *             collectionName: "myCollection",
     *             filterExpression: {
     *                 "transcriptDatetime": {
     *                     "$gt": "2023-01-01T00:00:00.000Z"
     *                 }
     *             },
     *             sourceFields: {
     *                 body: "transcriptSummary",
     *                 sourceName: "meetingName",
     *                 sourceSystemUpdated: "transcriptDatetime",
     *                 sourceUrl: "link"
     *             }
     *         }
     *     })
     */
    public async updateMongoCollectionSync(
        request: Credal.UpdateMongoCollectionSyncRequest,
        requestOptions?: DocumentCollections.RequestOptions
    ): Promise<Credal.MongoCollectionSyncResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.CredalEnvironment.Production,
                "/v0/documentCollections/mongodb/updateMongoSync"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@credal/sdk",
                "X-Fern-SDK-Version": "0.0.20",
                "User-Agent": "@credal/sdk/0.0.20",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.UpdateMongoCollectionSyncRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.MongoCollectionSyncResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CredalError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CredalError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CredalTimeoutError();
            case "unknown":
                throw new errors.CredalError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["CREDAL_API_KEY"];
        if (bearer == null) {
            throw new errors.CredalError({
                message: "Please specify CREDAL_API_KEY when instantiating the client.",
            });
        }

        return `Bearer ${bearer}`;
    }
}
