/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { CredalClient } from "../../src/Client";

describe("PermissionsService", () => {
    test("checkResourceAuthorizationForUser", async () => {
        const server = mockServerPool.createServer();
        const client = new CredalClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            resourceIdentifier: {
                type: "external-resource-id",
                externalResourceId: "170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr",
                resourceType: "GOOGLE_DRIVE_ITEM",
            },
            userEmail: "john.smith@foo.com",
        };
        const rawResponseBody = { authorized: true };
        server
            .mockEndpoint()
            .post("/v0/permissions/checkResourceAuthorizationForUser")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.permissionsService.checkResourceAuthorizationForUser({
            resourceIdentifier: {
                type: "external-resource-id",
                externalResourceId: "170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr",
                resourceType: "GOOGLE_DRIVE_ITEM",
            },
            userEmail: "john.smith@foo.com",
        });
        expect(response).toEqual({
            authorized: true,
        });
    });

    test("checkBulkResourcesAuthorizationForUser", async () => {
        const server = mockServerPool.createServer();
        const client = new CredalClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            resourceIdentifiers: [
                {
                    type: "url",
                    url: "https://docs.google.com/document/d/170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr/edit",
                },
                {
                    type: "external-resource-id",
                    externalResourceId: "sfsdfvr54UvyslPVWkQFOA0dfsdfsdflgNycFmdZJQr",
                    resourceType: "ZENDESK_TICKET",
                },
            ],
            userEmail: "john.smith@foo.com",
        };
        const rawResponseBody = [
            {
                externalResourceId: {
                    externalResourceId: "170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr",
                    resourceType: "GOOGLE_DRIVE_ITEM",
                },
                inputUrl: "https://docs.google.com/document/d/170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr/edit",
                authorized: true,
            },
            { externalResourceId: { externalResourceId: "123456", resourceType: "ZENDESK_TICKET" }, authorized: true },
        ];
        server
            .mockEndpoint()
            .post("/v0/permissions/checkBulkResourcesAuthorizationForUser")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.permissionsService.checkBulkResourcesAuthorizationForUser({
            resourceIdentifiers: [
                {
                    type: "url",
                    url: "https://docs.google.com/document/d/170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr/edit",
                },
                {
                    type: "external-resource-id",
                    externalResourceId: "sfsdfvr54UvyslPVWkQFOA0dfsdfsdflgNycFmdZJQr",
                    resourceType: "ZENDESK_TICKET",
                },
            ],
            userEmail: "john.smith@foo.com",
        });
        expect(response).toEqual([
            {
                externalResourceId: {
                    externalResourceId: "170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr",
                    resourceType: "GOOGLE_DRIVE_ITEM",
                },
                inputUrl: "https://docs.google.com/document/d/170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr/edit",
                authorized: true,
            },
            {
                externalResourceId: {
                    externalResourceId: "123456",
                    resourceType: "ZENDESK_TICKET",
                },
                authorized: true,
            },
        ]);
    });

    test("listCachedAuthorizedResourcesForUser", async () => {
        const server = mockServerPool.createServer();
        const client = new CredalClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { userEmail: "john.smith@foo.com" };
        const rawResponseBody = [
            {
                credalId: "2b5cf2b8-3df3-11ef-9a96-332d4470d189",
                externalId: {
                    externalResourceId: "170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr",
                    resourceType: "GOOGLE_DRIVE_ITEM",
                },
            },
            {
                credalId: "eb5a0a00-3d9a-11ef-836d-375bf4e237a6",
                externalId: { externalResourceId: "123456", resourceType: "ZENDESK_TICKET" },
            },
        ];
        server
            .mockEndpoint()
            .post("/v0/permissions/listCachedAuthorizedResourcesForUser")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.permissionsService.listCachedAuthorizedResourcesForUser({
            userEmail: "john.smith@foo.com",
        });
        expect(response).toEqual([
            {
                credalId: "2b5cf2b8-3df3-11ef-9a96-332d4470d189",
                externalId: {
                    externalResourceId: "170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr",
                    resourceType: "GOOGLE_DRIVE_ITEM",
                },
            },
            {
                credalId: "eb5a0a00-3d9a-11ef-836d-375bf4e237a6",
                externalId: {
                    externalResourceId: "123456",
                    resourceType: "ZENDESK_TICKET",
                },
            },
        ]);
    });
});
