/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { CredalClient } from "../../src/Client";

describe("DocumentCatalog", () => {
    test("uploadDocumentContents", async () => {
        const server = mockServerPool.createServer();
        const client = new CredalClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            documentName: "My Document",
            documentContents: "Lorem ipsum...",
            documentExternalId: "73eead26-d124-4940-b329-5f068a0a8db9",
            allowedUsersEmailAddresses: ["jack@credal.ai", "ravin@credal.ai"],
            uploadAsUserEmail: "jack@credal.ai",
        };
        const rawResponseBody = { documentId: "82e4b12a-6990-45d4-8ebd-85c00e030c24" };
        server
            .mockEndpoint()
            .post("/v0/catalog/uploadDocumentContents")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.documentCatalog.uploadDocumentContents({
            documentName: "My Document",
            documentContents: "Lorem ipsum...",
            documentExternalId: "73eead26-d124-4940-b329-5f068a0a8db9",
            allowedUsersEmailAddresses: ["jack@credal.ai", "ravin@credal.ai"],
            uploadAsUserEmail: "jack@credal.ai",
        });
        expect(response).toEqual({
            documentId: "82e4b12a-6990-45d4-8ebd-85c00e030c24",
        });
    });

    test("syncSourceByUrl", async () => {
        const server = mockServerPool.createServer();
        const client = new CredalClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            sourceUrl: "https://drive.google.com/file/d/123456/view",
            uploadAsUserEmail: "ria@credal.ai",
        };
        const rawResponseBody = { sourceId: "82e4b12a-6990-45d4-8ebd-85c00e030c24" };
        server
            .mockEndpoint()
            .post("/v0/catalog/syncSourceByUrl")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.documentCatalog.syncSourceByUrl({
            sourceUrl: "https://drive.google.com/file/d/123456/view",
            uploadAsUserEmail: "ria@credal.ai",
        });
        expect(response).toEqual({
            sourceId: "82e4b12a-6990-45d4-8ebd-85c00e030c24",
        });
    });

    test("metadata", async () => {
        const server = mockServerPool.createServer();
        const client = new CredalClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            sources: [
                {
                    metadata: { Department: "HR", Country: "United States" },
                    resourceIdentifier: {
                        type: "external-resource-id",
                        externalResourceId: "170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr",
                        resourceType: "GOOGLE_DRIVE_ITEM",
                    },
                },
                {
                    metadata: { Department: "Sales", Vertical: "Healthcare" },
                    resourceIdentifier: {
                        type: "external-resource-id",
                        externalResourceId: "123456",
                        resourceType: "ZENDESK_TICKET",
                    },
                },
            ],
            uploadAsUserEmail: "ben@credal.ai",
        };

        server
            .mockEndpoint()
            .patch("/v0/catalog/metadata")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.documentCatalog.metadata({
            sources: [
                {
                    metadata: {
                        Department: "HR",
                        Country: "United States",
                    },
                    resourceIdentifier: {
                        type: "external-resource-id",
                        externalResourceId: "170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr",
                        resourceType: "GOOGLE_DRIVE_ITEM",
                    },
                },
                {
                    metadata: {
                        Department: "Sales",
                        Vertical: "Healthcare",
                    },
                    resourceIdentifier: {
                        type: "external-resource-id",
                        externalResourceId: "123456",
                        resourceType: "ZENDESK_TICKET",
                    },
                },
            ],
            uploadAsUserEmail: "ben@credal.ai",
        });
        expect(response).toEqual(undefined);
    });
});
