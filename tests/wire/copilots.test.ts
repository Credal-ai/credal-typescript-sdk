// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../mock-server/MockServerPool";
import { CredalClient } from "../../src/Client";

describe("Copilots", () => {
    test("createCopilot", async () => {
        const server = mockServerPool.createServer();
        const client = new CredalClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "Customer Agent",
            description: "This agent is used to answer customer requests based on internal documentation.",
            collaborators: [{ email: "test@gmail.com", role: "editor" }],
        };
        const rawResponseBody = { agentId: "ac20e6ba-0bae-11ef-b25a-efca73df4c3a" };
        server
            .mockEndpoint()
            .post("/v0/copilots/createCopilot")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.copilots.createCopilot({
            name: "Customer Agent",
            description: "This agent is used to answer customer requests based on internal documentation.",
            collaborators: [
                {
                    email: "test@gmail.com",
                    role: "editor",
                },
            ],
        });
        expect(response).toEqual({
            agentId: "ac20e6ba-0bae-11ef-b25a-efca73df4c3a",
        });
    });

    test("createConversation", async () => {
        const server = mockServerPool.createServer();
        const client = new CredalClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { agentId: "82e4b12a-6990-45d4-8ebd-85c00e030c24", userEmail: "ravin@credal.ai" };
        const rawResponseBody = { conversationId: "ac20e6ba-0bae-11ef-b25a-efca73df4c3a" };
        server
            .mockEndpoint()
            .post("/v0/copilots/createConversation")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.copilots.createConversation({
            agentId: "82e4b12a-6990-45d4-8ebd-85c00e030c24",
            userEmail: "ravin@credal.ai",
        });
        expect(response).toEqual({
            conversationId: "ac20e6ba-0bae-11ef-b25a-efca73df4c3a",
        });
    });

    test("provideMessageFeedback", async () => {
        const server = mockServerPool.createServer();
        const client = new CredalClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            userEmail: "ravin@credal.ai",
            messageId: "dd721cd8-4bf2-4b94-9869-258df3dab9dc",
            agentId: "82e4b12a-6990-45d4-8ebd-85c00e030c24",
            messageFeedback: {
                feedback: "NEGATIVE",
                suggestedAnswer: "Yes, Credal is SOC 2 compliant.",
                descriptiveFeedback: "The response should be extremely clear and concise.",
            },
        };

        server
            .mockEndpoint()
            .post("/v0/copilots/provideMessageFeedback")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.copilots.provideMessageFeedback({
            userEmail: "ravin@credal.ai",
            messageId: "dd721cd8-4bf2-4b94-9869-258df3dab9dc",
            agentId: "82e4b12a-6990-45d4-8ebd-85c00e030c24",
            messageFeedback: {
                feedback: "NEGATIVE",
                suggestedAnswer: "Yes, Credal is SOC 2 compliant.",
                descriptiveFeedback: "The response should be extremely clear and concise.",
            },
        });
        expect(response).toEqual(undefined);
    });

    test("sendMessage", async () => {
        const server = mockServerPool.createServer();
        const client = new CredalClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            agentId: "82e4b12a-6990-45d4-8ebd-85c00e030c24",
            message: "Is Credal SOC 2 compliant?",
            userEmail: "ravin@credal.ai",
            inputVariables: [
                { name: "input1", ids: ["82e4b12a-6990-45d4-8ebd-85c00e030c24"] },
                {
                    name: "input2",
                    ids: ["82e4b12a-6990-45d4-8ebd-85c00e030c25", "82e4b12a-6990-45d4-8ebd-85c00e030c26"],
                },
            ],
        };
        const rawResponseBody = {
            sendChatResult: {
                type: "ai_response_result",
                conversationId: "fc938005-92db-411a-88eb-32ca50d5f744",
                response: {
                    message: "Based on the context provided, Credal is SOC 2 compliant...",
                    dataChunk:
                        "...SOC 2 is a technical audit that requires companies to establish and follow strict information security policies and procedures. Credal's SOC 2 report is available upon request...",
                },
                warnings: [],
                inserted_audit_log: { id: "5842804e-ffbe-4f8d-873e-f007fff93440" },
                referencedSources: [
                    {
                        id: "1",
                        externalResourceId: { externalResourceId: "123456", resourceType: "GOOGLE_DRIVE_ITEM" },
                        name: "Example Document",
                        url: "https://drive.google.com/file/d/123456/view",
                    },
                ],
                sourcesInDataContext: [
                    {
                        id: "1",
                        externalResourceId: { externalResourceId: "123456", resourceType: "GOOGLE_DRIVE_ITEM" },
                        name: "Example Document",
                        url: "https://drive.google.com/file/d/123456/view",
                    },
                    {
                        id: "2",
                        externalResourceId: { externalResourceId: "123457", resourceType: "GOOGLE_DRIVE_ITEM" },
                        name: "Example Document 2",
                        url: "https://drive.google.com/file/d/123457/view",
                    },
                ],
                webSearchResults: [
                    {
                        title: "SOC 2 Compliance",
                        url: "https://www.credal.ai/soc2",
                        contents: "Credal is SOC 2 compliant. Learn more about SOC 2 compliance at Credal.",
                    },
                ],
                messageId: "dd721cd8-4bf2-4b94-9869-258df3dab9dc",
            },
        };
        server
            .mockEndpoint()
            .post("/v0/copilots/sendMessage")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.copilots.sendMessage({
            agentId: "82e4b12a-6990-45d4-8ebd-85c00e030c24",
            message: "Is Credal SOC 2 compliant?",
            userEmail: "ravin@credal.ai",
            inputVariables: [
                {
                    name: "input1",
                    ids: ["82e4b12a-6990-45d4-8ebd-85c00e030c24"],
                },
                {
                    name: "input2",
                    ids: ["82e4b12a-6990-45d4-8ebd-85c00e030c25", "82e4b12a-6990-45d4-8ebd-85c00e030c26"],
                },
            ],
        });
        expect(response).toEqual({
            sendChatResult: {
                type: "ai_response_result",
                conversationId: "fc938005-92db-411a-88eb-32ca50d5f744",
                response: {
                    message: "Based on the context provided, Credal is SOC 2 compliant...",
                    dataChunk:
                        "...SOC 2 is a technical audit that requires companies to establish and follow strict information security policies and procedures. Credal's SOC 2 report is available upon request...",
                },
                warnings: [],
                inserted_audit_log: {
                    id: "5842804e-ffbe-4f8d-873e-f007fff93440",
                },
                referencedSources: [
                    {
                        id: "1",
                        externalResourceId: {
                            externalResourceId: "123456",
                            resourceType: "GOOGLE_DRIVE_ITEM",
                        },
                        name: "Example Document",
                        url: "https://drive.google.com/file/d/123456/view",
                    },
                ],
                sourcesInDataContext: [
                    {
                        id: "1",
                        externalResourceId: {
                            externalResourceId: "123456",
                            resourceType: "GOOGLE_DRIVE_ITEM",
                        },
                        name: "Example Document",
                        url: "https://drive.google.com/file/d/123456/view",
                    },
                    {
                        id: "2",
                        externalResourceId: {
                            externalResourceId: "123457",
                            resourceType: "GOOGLE_DRIVE_ITEM",
                        },
                        name: "Example Document 2",
                        url: "https://drive.google.com/file/d/123457/view",
                    },
                ],
                webSearchResults: [
                    {
                        title: "SOC 2 Compliance",
                        url: "https://www.credal.ai/soc2",
                        contents: "Credal is SOC 2 compliant. Learn more about SOC 2 compliance at Credal.",
                    },
                ],
                messageId: "dd721cd8-4bf2-4b94-9869-258df3dab9dc",
            },
        });
    });

    test("addCollectionToCopilot", async () => {
        const server = mockServerPool.createServer();
        const client = new CredalClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            copilotId: "82e4b12a-6990-45d4-8ebd-85c00e030c24",
            collectionId: "def1055f-83c5-43d6-b558-f7a38e7b299e",
        };

        server
            .mockEndpoint()
            .post("/v0/copilots/addCollectionToCopilot")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.copilots.addCollectionToCopilot({
            copilotId: "82e4b12a-6990-45d4-8ebd-85c00e030c24",
            collectionId: "def1055f-83c5-43d6-b558-f7a38e7b299e",
        });
        expect(response).toEqual(undefined);
    });

    test("removeCollectionFromCopilot", async () => {
        const server = mockServerPool.createServer();
        const client = new CredalClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            copilotId: "82e4b12a-6990-45d4-8ebd-85c00e030c24",
            collectionId: "def1055f-83c5-43d6-b558-f7a38e7b299e",
        };

        server
            .mockEndpoint()
            .post("/v0/copilots/removeCollectionFromCopilot")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.copilots.removeCollectionFromCopilot({
            copilotId: "82e4b12a-6990-45d4-8ebd-85c00e030c24",
            collectionId: "def1055f-83c5-43d6-b558-f7a38e7b299e",
        });
        expect(response).toEqual(undefined);
    });

    test("updateConfiguration", async () => {
        const server = mockServerPool.createServer();
        const client = new CredalClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            copilotId: "82e4b12a-6990-45d4-8ebd-85c00e030c24",
            configuration: {
                name: "Customer Agent",
                description: "This agent is used to answer customer requests based on internal documentation.",
                prompt: "You are a polite, helpful assistant used to answer customer requests.",
                aiEndpointConfiguration: { baseUrl: "https://api.openai.com/v1/", apiKey: "<YOUR_API_KEY_HERE>" },
            },
        };

        server
            .mockEndpoint()
            .post("/v0/copilots/updateConfiguration")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.copilots.updateConfiguration({
            copilotId: "82e4b12a-6990-45d4-8ebd-85c00e030c24",
            configuration: {
                name: "Customer Agent",
                description: "This agent is used to answer customer requests based on internal documentation.",
                prompt: "You are a polite, helpful assistant used to answer customer requests.",
                aiEndpointConfiguration: {
                    baseUrl: "https://api.openai.com/v1/",
                    apiKey: "<YOUR_API_KEY_HERE>",
                },
            },
        });
        expect(response).toEqual(undefined);
    });

    test("deleteCopilot", async () => {
        const server = mockServerPool.createServer();
        const client = new CredalClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "ac20e6ba-0bae-11ef-b25a-efca73df4c3a" };
        const rawResponseBody = { copilotId: "ac20e6ba-0bae-11ef-b25a-efca73df4c3a" };
        server
            .mockEndpoint()
            .delete("/v0/copilots/deleteCopilot")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.copilots.deleteCopilot({
            id: "ac20e6ba-0bae-11ef-b25a-efca73df4c3a",
        });
        expect(response).toEqual({
            copilotId: "ac20e6ba-0bae-11ef-b25a-efca73df4c3a",
        });
    });
});
